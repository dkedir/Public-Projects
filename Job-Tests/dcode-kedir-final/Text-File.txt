# README
## Challenge: Modeling a Graph Network
## Function Written By: Dean Kedir
### Code Notes
#### Inputs:
- I have included inputs for the testing, but feel free to change them however you would like, just be sure to include them in the same general area
	- add_vertex(vertex (string), payload(any))
	- add_edge(vertex_A (string), vertex_B (string), weight of edge (integer))
	- remove_vertex(vertex (string))
	- remove_edge(vertex_A (string), vertex_B (string))
	- shortest_path(edge list, starting point vertex (string), ending point vertex(string)
#### Output:
- For each, there will be a successful/failed addition/removal message
### Design choices, trade-offs, and explanation:

- I enjoyed this coding challenge/exercise, as I spent the week doing research into graph network and database theories and algorithms, in addition to writing code in a way I have never been tasked to do before. Writing the code without using any packages or libraries was specifically a challenge because one of the first things I was taught to do when learning how to program was to install homebrew and then pandas to build with the assistance of all of the tools that are baked into those packages. That being said, with the limited amount of time I had, I was unable to build a more scalable script, ideally being able to store all of the existing nodes and continuously add and remove many different nodes/edges at a single time. In following up with Joshua, he indicated that that was beyond the scope of the exercise, and this was really just a way to see how I approach data issues and if I am able to deliver a functioning system that stores nodes, edges(relationships), weights & payloads(metadata), and implement an algorithm that filters through the data in an effective manner to provide the desired output. Below, I will detail some of the thoughts I had, decisions I made, tradeoffs, and some opportunities for improvement.


- Starting with the initial data dictionary, without the use of packages I would not have been able to implement useful tools such as dataframes, so I chose between JSON and dictionary. With dictionaries being a hashable object type and JSON objects not having that capability, I chose dict for that added flexibility, but understanding that I can turn it into a JSON object at any time(JSON.loads()). In the first function, add_vertex, I am generating the vertex in the dictionary as a key, but also establishing the data structure under that key value. This data structure initiates a nested dictionary that has levels that I will be able to access later on to filter specific data out as needed.

- In the add_vertex function, I have conditional logic that checks if the payload (initially a dict, but I had to change it to an integer because a standard dictionary is 200+ bytes) is meeting the 'less than 100 bytes' threshold set for the payload. If it passes, then a success message will be printed and it will be added to the 'data' dict. Failure will generate a respective failing message.

- For the add_edge function, I have pulled any existing edges for the starting node and ending node into separate lists, and as long as there are less than 100 existing nodes and the weight has been set to less than or equal to 1000 for each node, then it will append the new vertex to both of the edge lists, generating that new relationship, then rewriting the new list over the existing list of nodes/edges. Additionally, it creates a relevant weight at an indexable position. This introduces the a point of improvement, as it could lead to issues if the index were to be reset or reordered at any point - rather a more ideal solution would be to have the 'node: weight' key-pair represent the edge. This function also produces relevant success and failure print messages.

- The remove_vertex function removes the vertex key in its entirety from the dictionary. Prior to removal, there is a for-loop that will filter through every edge it has, find the edge node, and then delete itself and the relevant weight from that edge nodes dictionary, erasing its relationship in its entirety. This function also produces relevant success and failure print messages.

- The remove_edge function, removes the edge and relevant weights from each of the nodes edge lists. This function also produces relevant success and failure print messages.

- The shortest_path function was the most difficult function to develop, but between research on the theories (Breadth-First Search and Dijkstra's Algorithm), I got a pretty good understanding of what the request was, however I still utilized the Dijkstra's algorithm to create my python model for searching for the shortest path from vertex to vertex. 

--First, the script create a few lists, one list to manage the paths that have been "explored" and one that manages an ongoing "queue" system. This will allow the script to move items from one to the other as we filter through each edge vertex and its relationships in search of the next edge. After creating the lists, we have a checkpoint that will ensure that the start point and the end point are not the same. 

--Following, we create a while loop that will go through each item in the queue and determine if we need to check the relevant next set of edge nodes for either a continued path forward or for the endpoint node. Initially, it generates a variable, 'path', which will be each edge node in the queue that has not been explored, without the first item as it is the starting point for this while loop (cannot start the while loop without at least one item in the list, starts as the starting point but is popped out). Following, node is defined as the last index of the path, checking if it is has not been explored, and the continuing to pull the adjacent nodes for each node not in the explored list but still in the path list (relationship to starting node or relevant sequential nodes). For each node in each set of adjacent nodes, it will loop through to define shortest path variable, append the node for that specific loop at that point, and if that node is equal to the end point the function ends there, returning that this is the shortest path. Otherwise, the function continues on and adds the node to the explored list before moving on the the next node to check if that node has a relationship with the endpoint node. If every connected node is checked and there is no connection found, a print message appears indicating that there is no existing path between the two nodes.

--This function has several tradeoffs and is far from being the most complete algorithm, however it does get the job done. Especially since this function has the ability to increase exponentially in size with each connection and node, the ability to finds the first available solution could prevent it from searching all nodes. Although this could be seen as a benefit, it is also equally disadvantageous as this will generate one solution, with x number of steps - even thought there could be n number of solutions that require the same number of steps and it is only giving one answer. This prevents me from seeing the big picture as far as the shortest path(s) from point A to B, instead giving me a shortest path from point A to B.










